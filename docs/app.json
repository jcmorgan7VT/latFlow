[{"name":"app.R","content":"#\n# This is a Shiny web application. You can run the application by clicking\n# the 'Run App' button above.\n#\n# Find out more about building applications with Shiny here:\n#\n#    https://shiny.posit.co/\n#\n#install.packages(c(\"shinylive\", \"httpuv\"))\n\nlibrary(shiny)\nlibrary(tidyverse)\nlibrary(terra)\nlibrary(tidyterra)\nlibrary(whitebox)\nlibrary(ggnewscale)\n\n\n\n# Define UI for application that draws a histogram\nui <- fluidPage(\n\n    # Application title\n    titlePanel(\"Travel distance for perched lateral flow, W3\"),\n\n    # Sidebar with a slider input for number of bins \n    sidebarLayout(\n        sidebarPanel(width = 3,\n             sliderInput(\"extent\",\n                          \"Minimum Drainage area (10 m^2):\",\n                          min = 80,\n                          max = 300,\n                          value = 130),\n            sliderInput(\"KuKl\",\n                        \"Ratio of Hydraulic Conductivities:\",\n                        min = 10,\n                        max = 600,\n                        value = 300),\n            sliderInput(\"Cn\",\n                        \"Impeding layer thickness (m):\",\n                        min = 2.8,\n                        max = 4.5,\n                        value = 3.2),\n            sliderInput(\"N\",\n                        \"Saturated thickness (m):\",\n                        min = 0,\n                        max = 0.35,\n                        value = 0.2)\n        ),\n\n        # Show a plot of the generated distribution\n        mainPanel(\n           plotOutput(\"distPlot\")\n        )\n    )\n)\n\n#use input$Cn etc.\n\n# Define server logic required to draw a histogram\nserver <- function(input, output) {\n\n    output$distPlot <- renderPlot({\n        #read in stuff needed for plotting\n        w3_outline <- vect(\"./req/10m_shedbound.shp\")\n        hill <- rast(\"./req/hydem1mlpns_hill.tif\")\n      \n        \n        #create stream network extent based on user input\n        w3_flowacc <- \"./req/hydem1mlpns_flowacc.tif\"\n        w3_streams <- \"./req/hydem10mlpns_streams_ret.tif\"\n        wbt_extract_streams(flow_accum = w3_flowacc,\n                            output = w3_streams,\n                            threshold = input$extent)\n        \n        #calculate downslope dsitance\n        bound_dem <- \"./req/hydem1mlpns_wsbound.tif\"\n        w3_downdist <- \"./req/hydem1mlpns_downdist_ext.tif\"\n        wbt_downslope_distance_to_stream(dem = bound_dem,\n                                         streams = w3_streams,\n                                         output = w3_downdist)\n        \n        ##calculate average flowpath slope\n        w3_avgflowslope <- \"./req/hydem1mlpns_avgflowslope.tif\"\n        #output already in degrees\n        wbt_average_flowpath_slope(dem = bound_dem,\n                                   output = w3_avgflowslope)\n        rads <- rast(w3_avgflowslope) * pi/180\n        \n        #calculate the travel distance\n        ##calculate Lt based on slope and input values\n        #input parameters\n        Ku_Kl <- input$KuKl\n        N <- input$N #meters\n        Cn <- input$Cn\n        \n        #caluclate Lt, or travel distance of lateral water flux\n        Lt <- Ku_Kl * (sin(rads)/((N + Cn)/Cn)) * N\n        \n        o <- rast(w3_downdist)\n        \n        \n        #compare downslope distance to travel length\n        x <- ifel(o <= Lt, 1, NA)\n        w3_shed <- \"./req/hydem1mlpns_shed.tif\"\n        streams <- rast(w3_streams) %>% \n          mask(rast(w3_shed))\n        activated <- ifel(x == streams, 2, x)\n        \n        #classify output\n        cls <- c(\"activated hillslope\", \"stream\")\n        df <- data.frame(id = 1:2, class=cls)\n        levels(activated) <- df\n        activated <- mask(activated, x)\n\n        # draw the histogram with the specified number of bins\n        ggplot()+\n          geom_spatraster(data = hill)+\n          theme(legend.position = \"\")+\n          scale_fill_gradientn(colors = c(\"gray9\", \"gray48\",\"lightgray\", \"white\"), guide = 'none')+\n          new_scale_fill() +\n          geom_spatraster(data = drop_na(activated), aes(fill = class), alpha = 0.7)+\n          scale_fill_manual(values = c(\"lightblue\", \"purple\"),\n                            na.translate=FALSE)+\n          theme_void()+\n          geom_sf(data = w3_outline, fill = NA, color = \"black\", alpha = 0.3, lwd = 1)+\n          theme(rect = element_rect(fill = \"transparent\", color = NA),\n                legend.title=element_blank())\n    })\n}\n\n# Run the application \nshinyApp(ui = ui, server = server)\nshinylive::export(appdir = \"latFlow\", destdir = \"docs\")\n\n","type":"text"}]
